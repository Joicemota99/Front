@page "/user-form"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject HttpClient Http

<h3>Cadastro de Usuário</h3>

@if(isSuccess){
    <div class="alert alert-success" role="alert">
        Usuário Criado com sucesso
    </div>
}
<EditForm Model="@user" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Nome:</label>
        <InputText id="name" class="form-control" @bind-Value="user.Name" />
        <ValidationMessage For="@(() => user.Name)" />
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="user.Email" />
        <ValidationMessage For="@(() => user.Email)" />
    </div>

    <button type="submit" class="btn btn-primary">Enviar</button>
</EditForm>

@code {
    private User user = new User();
    private bool isSuccess = false;

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5066/user", user);

            if (response.IsSuccessStatusCode)
            {
                var createdUser = await response.Content.ReadFromJsonAsync<User>();
                isSuccess = true;
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Erro ao criar o usuário.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exceção: {ex.Message}");
        }
    }

    public class User
    {
        [Required(ErrorMessage = "Nome é obrigatório")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Email é obrigatório")]
        [EmailAddress(ErrorMessage = "Email inválido")]
        public string Email { get; set; }
    }
}
